animation showing the insertion of several elements into an avl tree it includes left right left right and right left rotations fig avl tree with balance factors green in computer science an avl tree named after inventors delson elsky and andis is self balancing binary search tree it was the first such data structure to be invented in an avl tree the heights of the two child subtrees of any node differ by at most one if at any time they differ by more than one rebalancing is done to restore this property lookup insertion and deletion all take time in both the average and worst cases where is the number of nodes in the tree prior to the operation insertions and deletions may require the tree to be rebalanced by one or more tree rotations the avl tree is named after its two soviet inventors georgy adelson velsky and evgenii landis who published it in their paper an algorithm for the organization of information avl trees are often compared with red black trees because both support the same set of operations and take time for the basic operations for lookup intensive applications avl trees are faster than red black trees because they are more strictly balanced similar to red black trees avl trees are height balanced both are in general neither weight balanced nor balanced for any thereby binary tree is called balanced with if for every node the inequality holds and is minimal with this property is the number of nodes below the tree with as root including the root and is the left child node of that is sibling nodes can have hugely differing numbers of descendants definition balance factor in binary tree the balance factor of is defined to be the height difference of its two child sub trees binary tree is defined to be an avl tree if the invariant holds for every in the tree with is called left heavy one with is called right heavy and one with is sometimes simply called balanced remark in what follows because there is one to one correspondence between nodes and the sub trees rooted by them the name of an object is sometimes used to refer to the node and sometimes used to refer to the sub tree properties balance factors can be kept up to date by knowing the previous balance factors and the change in height it is not necessary to know the absolute height for holding the avl balance information in the traditional way two bits per node are sufficient however later research showed if the avl tree is implemented as rank balanced tree with delta ranks allowed of or with meaning when going upward there is an additional increment in height of one or two this can be done with one bit the height counted as number of edges on the longest path of an avl tree with nodes lies in the interval knuth has internal nodes and external nodes the first ones correspond to the article key carrying nodes whereas knuth external nodes which do not carry key have no correspondence in the article nevertheless knuth external nodes increase the tree height by see fig an incrementation which the article does not follow at the end with the article notion of height the tree consisting of the root only has height so that is the number of its nodes nb where is the golden ratio and this is because an avl tree of contains at least nodes where is the fibonacci sequence with the seed values operations read only operations of an avl tree involve carrying out the same actions as would be carried out on an unbalanced binary search tree but modifications have to observe and restore the height balance of the sub trees searching searching for specific key in an avl tree can be done the same way as that of any balanced or unbalanced binary search tree in order for search to work effectively it has to employ comparison function which establishes total order or at least total preorder on the set of keys the number of comparisons required for successful search is limited by the height and for unsuccessful search is very close to so both are in traversal once node has been found in an avl tree the next or previous node can be accessed in amortized constant time some instances of exploring these nearby nodes require traversing up to links particularly when navigating from the rightmost leaf of the root left subtree to the root or from the root to the leftmost leaf of the root right subtree in the avl tree of figure moving from node to the next but one node takes steps however exploring all nodes of the tree in this manner would visit each link exactly twice one downward visit to enter the subtree rooted by that node another visit upward to leave that node subtree after having explored it and since there are links in any tree the amortized cost is or approximately insert when inserting node into an avl tree you initially follow the same process as inserting into binary search tree if the tree is empty then the node is inserted as the root of the tree in case the tree has not been empty then we go down the root and recursively go down the tree searching for the location to insert the new node this traversal is guided by the comparison function in this case the node always replaces null reference left or right of an external node in the tree the node is either made left child or right child of the external node after this insertion if tree becomes unbalanced only ancestors of the newly inserted node are unbalanced this is because only those nodes have their sub trees altered so it is necessary to check each of the node ancestors for consistency with the invariants of avl trees this is called retracing this