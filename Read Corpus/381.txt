in computer programming assembly language or assembler language often abbreviated asm is any low level programming language in which there is very strong correspondence between the instructions in the language and the architecture machine code instructions because assembly depends on the machine code instructions every assembly language is designed for exactly one specific computer architecture assembly language may also be called symbolic machine code assembly code is converted into executable machine code by utility program referred to as an assembler the conversion process is referred to as assembly as in assembling the source code assembly language usually has one statement per machine instruction but comments and statements that are assembler directives macros and symbolic labels of program and memory locations are often also supported the term assembler is generally attributed to wilkes wheeler and gill in their book the preparation of programs for an electronic digital computer who however used the term to mean program that assembles another program consisting of several sections into single program each assembly language is specific to particular computer architecture and sometimes to an operating system however some assembly languages do not provide specific syntax for operating system calls and most assembly languages can be used universally with any operating system as the language provides access to all the real capabilities of the processor upon which all system call mechanisms ultimately rest in contrast to assembly languages most high level programming languages are generally portable across multiple architectures but require interpreting or compiling much more complicated task than assembling the computational step when an assembler is processing program is called assembly time assembly language syntax assembly language uses mnemonic to represent each low level machine instruction or opcode typically also each architectural register flag etc many operations require one or more operands in order to form complete instruction most assemblers permit named constants registers and labels for program and memory locations and can calculate expressions for operands thus the programmers are freed from tedious repetitive calculations and assembler programs are much more readable than machine code depending on the architecture these elements may also be combined for specific instructions or addressing modes using offsets or other data as well as fixed addresses many assemblers offer additional mechanisms to facilitate program development to control the assembly process and to aid debugging terminology macro assembler includes facility so that parameterized assembly language text can be represented by name and that name can be used to insert the expanded text into other code cross assembler see also cross compiler is an assembler that is run on computer or operating system the host system of different type from the system on which the resulting code is to run the target system cross assembling facilitates the development of programs for systems that do not have the resources to support software development such as an embedded system or microcontroller in such case the resulting object code must be transferred to the target system via read only memory rom eprom etc programmer when the read only memory is integrated in the device as in or data link using either an exact bit by bit copy of the object code or text based representation of that code such as intel hex or motorola record high level assembler is program that provides language abstractions more often associated with high level languages such as advanced control structures if then else do case etc and high level abstract data types including structures records unions classes and sets microassembler is program that helps prepare microprogram called firmware to control the low level operation of computer meta assembler is program that accepts the syntactic and semantic description of an assembly language and generates an assembler for that language meta symbol assemblers for the sds series and sds sigma series of computers are meta assemblers sperry univac also provided meta assembler for the univac series inline assembler or embedded assembler is assembler code contained within high level language program this is most often used in systems programs which need direct access to the hardware key concepts assembler an assembler program creates object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents this representation typically includes an operation code opcode as well as other control bits and data the assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities the use of symbolic references is key feature of assemblers saving tedious calculations and manual address updates after program modifications most assemblers also include macro facilities for performing textual substitution to generate common short sequences of instructions as inline instead of called subroutines some assemblers may also be able to perform some simple types of instruction set specific optimizations one concrete example of this may be the ubiquitous assemblers from various vendors called jump sizing most of them are able to perform jump instruction replacements long jumps replaced by short or relative jumps in any number of passes on request others may even do simple rearrangement or insertion of instructions such as some assemblers for risc architectures that can help optimize sensible instruction scheduling to exploit the cpu pipeline as efficiently as possible assemblers have been available since the as the first step above machine language and before high level programming languages such as fortran algol cobol and lisp there have also been several classes of translators and semi automatic code generators with properties similar to both assembly and high level languages with speedcode as perhaps one of the better known examples there may be several assemblers with different syntax for particular cpu or instruction set architecture for instance an instruction to add memory data to register in family processor might be add eax ebx in original intel syntax whereas this would be written addl ebx eax in the at syntax used by the gnu assembler despite different appearances different syntactic forms generally generate the same numeric machine code single assembler may also have different modes in order