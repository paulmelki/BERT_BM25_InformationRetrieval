in computer science an abstract data type adt is mathematical model for data types an abstract data type is defined by its behavior semantics from the point of view of user of the data specifically in terms of possible values possible operations on data of this type and the behavior of these operations this mathematical model contrasts with data structures which are concrete representations of data and are the point of view of an implementer not user formally an adt may be defined as class of objects whose logical behavior is defined by set of values and set of operations this is analogous to an algebraic structure in mathematics what is meant by behavior varies by author with the two main types of formal specifications for behavior being axiomatic algebraic specification and an abstract model these correspond to axiomatic semantics and operational semantics of an abstract machine respectively some authors also include the computational complexity cost both in terms of time for computing operations and space for representing values in practice many common data types are not adts as the abstraction is not perfect and users must be aware of issues like arithmetic overflow that are due to the representation for example integers are often stored as fixed width values bit or bit binary numbers and thus experience integer overflow if the maximum value is exceeded adts are theoretical concept in computer science used in the design and analysis of algorithms data structures and software systems and do not correspond to specific features of computer languages mainstream computer languages do not directly support formally specified adts however various language features correspond to certain aspects of adts and are easily confused with adts proper these include abstract types opaque data types protocols and design by contract adts were first proposed by barbara liskov and stephen zilles in as part of the development of the clu language examples for example integers are an adt defined as the values and by the operations of addition subtraction multiplication and division together with greater than less than etc which behave according to familiar mathematics with care for integer division independently of how the integers are represented by the computer explicitly behavior includes obeying various axioms associativity and commutativity of addition etc and preconditions on operations cannot divide by zero typically integers are represented in data structure as binary numbers most often as two complement but might be binary coded decimal or in ones complement but the user is abstracted from the concrete choice of representation and can simply use the data as data types an adt consists not only of operations but also of values of the underlying data and of constraints on the operations an interface typically refers only to the operations and perhaps some of the constraints on the operations notably pre conditions and post conditions but not other constraints such as relations between the operations for example an abstract stack which is last in first out structure could be defined by three operations push that inserts data item onto the stack pop that removes data item from it and peek or top that accesses data item on top of the stack without removal an abstract queue which is first in first out structure would also have three operations enqueue that inserts data item into the queue dequeue that removes the first data item from it and front that accesses and serves the first data item in the queue there would be no way of differentiating these two data types unless mathematical constraint is introduced that for stack specifies that each pop always returns the most recently pushed item that has not been popped yet when analyzing the efficiency of algorithms that use stacks one may also specify that all operations take the same time no matter how many data items have been pushed into the stack and that the stack uses constant amount of storage for each element introduction abstract data types are purely theoretical entities used among other things to simplify the description of abstract algorithms to classify and evaluate data structures and to formally describe the type systems of programming languages however an adt may be implemented by specific data types or data structures in many ways and in many programming languages or described in formal specification language adts are often implemented as modules the module interface declares procedures that correspond to the adt operations sometimes with comments that describe the constraints this information hiding strategy allows the implementation of the module to be changed without disturbing the client programs the term abstract data type can also be regarded as generalized approach of number of algebraic structures such as lattices groups and rings the notion of abstract data types is related to the concept of data abstraction important in object oriented programming and design by contract methodologies for software development defining an abstract data type an abstract data type is defined as mathematical model of the data objects that make up data type as well as the functions that operate on these objects there are no standard conventions for defining them broad division may be drawn between imperative and functional definition styles imperative style definition in the philosophy of imperative programming languages an abstract data structure is conceived as an entity that is mutable meaning that it may be in different states at different times some operations may change the state of the adt therefore the order in which operations are evaluated is important and the same operation on the same entities may have different effects if executed at different times just like the instructions of computer or the commands and procedures of an imperative language to underscore this view it is customary to say that the operations are executed or applied rather than evaluated the imperative style is often used when describing abstract algorithms see the art of computer programming by donald knuth for more details abstract variable imperative style definitions of adt often depend on the concept of