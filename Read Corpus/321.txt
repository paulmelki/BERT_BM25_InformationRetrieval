ada is structured statically typed imperative and object oriented high level programming language extended from pascal and other languages it has built in language support for design by contract dbc extremely strong typing explicit concurrency tasks synchronous message passing protected objects and non determinism ada improves code safety and maintainability by using the compiler to find errors in favor of runtime errors ada is an international technical standard jointly defined by the international organization for standardization iso and the international commission iec the standard called ada informally is iso iec ada was originally designed by team led by french computer scientist jean ichbiah of cii honeywell bull under contract to the united states department of defense dod from to to supersede over programming languages used by the dod at that time ada was named after ada lovelace who has been credited as the first computer programmer features ada was originally designed for embedded and real time systems the ada revision designed by tucker taft of intermetrics between and improved support for systems numerical financial and object oriented programming oop features of ada include strong typing modular programming mechanisms packages run time checking parallel processing tasks synchronous message passing protected objects and select statements exception handling and generics ada added support for object oriented programming including dynamic dispatch the syntax of ada minimizes choices of ways to perform basic operations and prefers english keywords such as or else and and then to symbols such as and ada uses the basic arithmetical operators and but avoids using other symbols code blocks are delimited by words such as declare begin and end where the end in most cases is followed by the identifier of the block it closes if end if loop end loop in the case of conditional blocks this avoids dangling else that could pair with the wrong nested if expression in other languages like or java ada is designed for developing very large software systems ada packages can be compiled separately ada package specifications the package interface can also be compiled separately without the implementation to check for consistency this makes it possible to detect problems early during the design phase before implementation starts large number of compile time checks are supported to help avoid bugs that would not be detectable until run time in some other languages or would require explicit checks to be added to the source code for example the syntax requires explicitly named closing of blocks to prevent errors due to mismatched end tokens the adherence to strong typing allows detecting many common software errors wrong parameters range violations invalid references mismatched types etc either during compile time or otherwise during run time as concurrency is part of the language specification the compiler can in some cases detect potential deadlocks compilers also commonly check for misspelled identifiers visibility of packages redundant declarations etc and can provide warnings and useful suggestions on how to fix the error ada also supports run time checks to protect against access to unallocated memory buffer overflow errors range violations off by one errors array access errors and other detectable bugs these checks can be disabled in the interest of runtime efficiency but can often be compiled efficiently it also includes facilities to help program verification for these reasons ada is widely used in critical systems where any anomaly might lead to very serious consequences accidental death injury or severe financial loss examples of systems where ada is used include avionics air traffic control railways banking military and space technology ada dynamic memory management is high level and type safe ada has no generic or untyped pointers nor does it implicitly declare any pointer type instead all dynamic memory allocation and deallocation must occur via explicitly declared access types each access type has an associated storage pool that handles the low level details of memory management the programmer can either use the default storage pool or define new ones this is particularly relevant for non uniform memory access it is even possible to declare several different access types that all designate the same type but use different storage pools also the language provides for accessibility checks both at compile time and at run time that ensures that an access value cannot outlive the type of the object it points to though the semantics of the language allow automatic garbage collection of inaccessible objects most implementations do not support it by default as it would cause unpredictable behaviour in real time systems ada does support limited form of region based memory management also creative use of storage pools can provide for limited form of automatic garbage collection since destroying storage pool also destroys all the objects in the pool double dash resembling an em dash denotes comment text comments stop at end of line to prevent unclosed comments from accidentally voiding whole sections of source code disabling whole block of code now requires the prefixing of each line or column individually with while clearly denoting disabled code with column of repeated down the page this renders the experimental dis re enablement of large blocks more drawn out process the semicolon is statement terminator and the null or no operation statement is null single without statement to terminate is not allowed unlike most iso standards the ada language definition known as the ada reference manual or arm or sometimes the language reference manual or lrm is free content thus it is common reference for ada programmers not only programmers implementing ada compilers apart from the reference manual there is also an extensive rationale document which explains the language design and the use of various language constructs this document is also widely used by programmers when the language was revised new rationale document was written one notable free software tool that is used by many ada programmers to aid them in writing ada source code is the gnat programming studio history in the the us department of defense dod became concerned by the number of